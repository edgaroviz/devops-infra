name: Create App Infra 

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  Terraform-init-validate-plan-apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920373021859:role/ze_my_admin_role
          aws-region: eu-west-1
          role-session-name: APIActions
          role-duration-seconds: 3600

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Terraform infra init, validate for all environments and regions
        run: |
          for env in tf-infra/env/*; do
            echo "Terraform init, valite and plan in $env"
            for region in "$env"/*; do
              terraform -chdir=$region/infra init
              terraform -chdir=$region/infra validate
              echo "Initialized and validated changes at region: $region"
            echo "Initialized and validated changes at envrionemnt: $env"
            done
          done

      - name: Terraform infra apply for all environments and regions
        run: |
          for env in tf-infra/env/*; do
            echo "Terraform apply in $env"
            for region in "$env"/*; do
              terraform -chdir=$region/infra apply -auto-approve
              echo "Applied changes at region: $region"
            echo "Applied changes at environment: $env"
            done
          done

  # manual-approval:
  #   name: Manual Approval
  #   runs-on: ubuntu-latest
  #   needs: Terraform-init-validate-plan
  #   if: always()
    
  #   permissions:
  #     issues: write

  #   steps:
  #     - name: Await Manual Approval
  #       uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ github.TOKEN }}
  #         approvers: edgaroviz
  #         minimum-approvals: 1
  #         issue-title: "Manual Approval Required for Terraform Apply"
  #         issue-body: "Please approve or deny the deployment."

  Argo_installation:
    needs: [Terraform-init-validate-plan-apply]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::920373021859:role/ze_my_admin_role
          aws-region: eu-west-1
          role-session-name: APIActions
          role-duration-seconds: 3600

      - uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'

      - name: Deploy ArgoCD and attach repo
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          for env in tf-infra/env/*; do
              echo "ArgoCD installation in $env"
              for region_path in "$env"/*; do
                  # Extract the actual region name from the path
                  region=$(basename "$region_path")
                  echo "Deploying ArgoCD in region: $region"
                  aws eks --region "$region" update-kubeconfig --name ze-${env##*/}-$region-eks --kubeconfig ~/.kube/config
                  terraform -chdir="$region_path/argocd" init
                  terraform -chdir="$region_path/argocd" apply -auto-approve
                  echo "Deployed ArgoCD at region: $region"

                  kubectl create secret generic argocd-devops-infra-repo \
                    --namespace argocd \
                    --from-literal=url=git@github.com:edgaroviz/devops-infra.git \
                    --from-literal=name=devops-infra \
                    --from-literal=project=default \
                    --from-file=sshPrivateKey=<(echo -n "{{ secrets.GIT_SSH_KEY }}" | base64 -w 0) \
                    --type Opaque

                  kubectl label secret argocd-devops-infra-repo -n argocd argocd.argoproj.io/secret-type=repository --overwrite
                  echo "Attached Devops-infra repo to ArgoCD at region: $region"

              done
              echo "Applied ArgoCD and repository at environment: ${env##*/}"
          done

      - name: Deploy counter-service application
        run: |
          for env in argocd-applications/*; do
            echo "ArgoCD app apply in $env"
            for region in "$env"/*; do
              aws eks --region $region update-kubeconfig --name ze-$env-$region-eks --kubeconfig ~/.kube/config
              kubectl apply -f counter-service-app.yaml
              echo "Deployed counter-service app at region: $region"
            echo "Deployed counter-service app at environment: $env"
            done
          done